
#002案例
#x = float(input("x = "))
#if x > 1:
#    y = 3 * x -5
#elif x >= -1:#猜数字游戏
#计算机出一个1~100之间的随机数由人来猜
#计算机根据人猜的数字分别给出提示大一点/小一点/猜对

import random

answer = random.randint(1,100)
counter = 0
aaa = 1
print(aaa)
print( )

#while True:
#    counter +=1
#    number = int(input('请输入数字：'))
#    if number < answer:
#        print("大一点")
#    elif number >answer:
#        print("小一点")
#    else :
#        print("恭喜你猜对了！")
#        break
#print('你一共猜了%d次'%counter)
#if counter >7:
#   print('你的智商余额不足！')

for i in range(1, 10):
    for j in range(1, i + 1):
        print('%d*%d=%d' % (i, j, i * j), end='\t')
    print()

#输入一个数判断其是不是素数
import math
# num = int(input('请输入一个数：'))#函数练习
#练习1：实现计算求最大公约数和最小公倍数的函数

def gcd(a,b):
    bzc = True
    while bzc:
        qy = a%b
        if qy != 0:
            bzc = True
            a = b
            b = qy
        if qy == 0:
            bzc = False
    return b

def gbd(a,b):
# a = 56
# b = 63
    gbs = a*b/gcd(a,b)
    return gbs

#def main():
str1 = "hello, world!"
# 通过len函数计算字符串的长度
print(len(str1))  # 13
# 获得字符串首字母大写的拷贝
print(str1.capitalize())  # Hello, world!
# 获得字符串变大写后的拷贝
print(str1.upper())  # HELLO, WORLD!
# 从字符串中查找子串所在位置
print(str1.find('he'))  # 8
print(str1.find('shit'))  # -1
# 与find类似但找不到子串时会引发异常
# print(str1.index('or'))
# print(str1.index('shit'))
# 检查字符串是否以指定的字符串开头
print(str1.startswith('He'))  # False
print(str1.startswith('hel'))  # True
# 检查字符串是否以指定的字符串结尾
print(str1.endswith('!'))  # True
# 将字符串以指定的宽度居中并在两侧填充指定的字符
print(str1.center(50, '*'))
# 将字符串以指定的宽度靠右放置左侧填充指定的字符
print(str1.rjust(50, ' '))
str2 = 'abc123456'
# 从字符串中取出指定位置的字符(下标运算)
print(str2[2])  # c
# 字符串切片(从指定的开始索引到指定的结束索引)
print(str2[2:5])  # c12
print(str2[2:])  # c123456
print(str2[2::2])  # c246
print(str2[::2])  # ac246
print(str2[::-1])  # 654321cba
print(str2[-3:-1])  # 45
# 检查字符串是否由数字构成
print(str2.isdigit())  # False
# 检查字符串是否以字母构成
print(str2.isalpha())  # False
# 检查字符串是否以数字和字母构成
print(str2.isalnum())  # True
str3 = '  jackfrued@126.com '
print(str3)
# 获得字符串修剪左右两侧空格的拷贝
print(str3.strip())



#if __name__ == '__main__' :


    # a = int(input("a = "))
    # b = int(input("b = "))
    #
    # print(gcd(a,b))
    # print(gbd(a,b))
# end = int(math.sqrt(num))
# is_prime = True
# for i in range(2,end+1):
#     print(i)
#     if num%i ==0:
#         is_prime =False
#         break
# if num !=1 and is_prime :
#     print('%d是素数' % num)
# else:
#     print('%不是素数' % num)


#输入两个正整数计算最大公约数和最小公倍数

# a1 = int(input("a ="))
# b1 = int(input("b ="))
# a = a1
# b = b1
#
#
# is_gys = True
# while is_gys:
#     qiuyu =a % b
#     if qiuyu != 0:
#         is_gys = True
#         a = b
#         b = qiuyu
#     else:
#         is_gys = False
#         break
# print("a与b之间的最大公约数为%d,最大公倍数为%d"%(b ,a1*b1/b))
#
# 打印各种三角形图案

rows = int(input("rows = "))

for i in range(rows):
    for j in range(i+1):
        print("*",end =" ")
    print(end = "\n")

for i in range(rows):
    for j in range(rows):
      if j < rows- i -1:
          print(" ",end = " ")
      else:
          print("*",end = " ")
    print( )

for i in range(rows):
    for j in range(rows):
      if j < rows - i -1:
          print(" ",end = " ")
    for j in range(rows - i,rows + i + 1):
          print("*",end = " ")
    print( )
#    y = x + 3
#else:
#    y = 5* + 3
#print('f(%.2f) = %.2f' % (x,y))

#py003第3期打卡

#英制单位英寸和公制单位厘米互换

#value = float(input('请输入长度：'))
#unit = input('请输入单位：')
#if unit =='in' or unit =='英寸':
#    print('%f英寸 = %f厘米'%(value,value*2.54))
#elif unit =='cm' or unit == '厘米':
#    print('%f厘米= %f英寸' % (value, value /2.54))
#else :
#    print('请输入有效单位')

from random import  randint
face = randint(1, 6)
if face == 1:
    result = '唱首歌'
elif face == 2:
    result = '跳个舞'
elif face == 3:
    result = '学狗叫'
elif face == 4:
    result = '做俯卧撑'
elif face == 5:
    result = '念绕口令'
else:
    result = '讲冷笑话'
print(result)

import math
#判断三角形并计算周长和面积
a = float(input('a ='))
b = float(input('b ='))
c = float(input('c ='))
if a + b > c and a + c > b and c + b> a :
    print('周长：%f'%(a+b+c))
    p = (a + b + c )/2
    print("三角形的面积：%f" %(math.sqrt(p*(p-a)*(p-b)*(p-c))))
else:
    print("无法构成三角形！")
#fc母鸡 mc公鸡 minc小鸡  
import math
money = 100
for fc in range(math.ceil(money/3)):
	for mc in range (math.ceil(money/5)):
				minm = 100 - 3*fc -5*mc
		if minm <100 and fc+mc < 100:
			minc = minm * 3
			if minc+fc+mc == 100:
				print("母鸡%d公鸡%d小鸡%d"%
					  (fc,mc,minc))
#函数练习
#练习1：实现计算求最大公约数和最小公倍数的函数

def gcd(a,b):
    bzc = True
    while bzc:
        qy = a%b
        if qy != 0:
            bzc = True
            a = b
            b = qy
        if qy == 0:
            bzc = False
    return b

def gbd(a,b):
# a = 56
# b = 63
    gbs = a*b/gcd(a,b)
    return gbs

#def main():
str1 = "hello, world!"
# 通过len函数计算字符串的长度
print(len(str1))  # 13
# 获得字符串首字母大写的拷贝
print(str1.capitalize())  # Hello, world!
# 获得字符串变大写后的拷贝
print(str1.upper())  # HELLO, WORLD!
# 从字符串中查找子串所在位置
print(str1.find('he'))  # 8
print(str1.find('shit'))  # -1
# 与find类似但找不到子串时会引发异常
# print(str1.index('or'))
# print(str1.index('shit'))
# 检查字符串是否以指定的字符串开头
print(str1.startswith('He'))  # False
print(str1.startswith('hel'))  # True
# 检查字符串是否以指定的字符串结尾
print(str1.endswith('!'))  # True
# 将字符串以指定的宽度居中并在两侧填充指定的字符
print(str1.center(50, '*'))
# 将字符串以指定的宽度靠右放置左侧填充指定的字符
print(str1.rjust(50, ' '))
str2 = 'abc123456'
# 从字符串中取出指定位置的字符(下标运算)
print(str2[2])  # c
# 字符串切片(从指定的开始索引到指定的结束索引)
print(str2[2:5])  # c12
print(str2[2:])  # c123456
print(str2[2::2])  # c246
print(str2[::2])  # ac246
print(str2[::-1])  # 654321cba
print(str2[-3:-1])  # 45
# 检查字符串是否由数字构成
print(str2.isdigit())  # False
# 检查字符串是否以字母构成
print(str2.isalpha())  # False
# 检查字符串是否以数字和字母构成
print(str2.isalnum())  # True
str3 = '  jackfrued@126.com '
print(str3)
# 获得字符串修剪左右两侧空格的拷贝
print(str3.strip())



#if __name__ == '__main__' :


    # a = int(input("a = "))
    # b = int(input("b = "))
    #
    # print(gcd(a,b))
    # print(gbd(a,b))
import turtle
from turtle import *

#比个心
def curvmove():
    for i in range(200):
        turtle.right(1)
        turtle.forward(1)

# turtle.color('red','pink')
# turtle.begin_fill( )
# turtle.left(140)
# turtle.forward(111.65)
#
# curvmove()
# turtle.left(120)
# curvmove()
# turtle.forward(111.65)
# turtle.end_fill( )
# done()

def main():
    list1 = [1,3,5,7,100]
    print(list1)
    list2 = ['hellow'] * 5
    print(list2)
    print(len(list1)) # 5
    print(list1[0])#1
    print(list1[4])#100
    print(list1[-1])#100
    print(list1[-3])#5
    list1[2] = 300
    print(list1)
    list1.append(200)
    print(list1)
    list1 .insert(1,400)
    print(list1)
    list1 +=[1000,2000]
    list1 +=[3]
    print(list1)

    # 删除元素
    list1.remove(3)
    list1.remove(3)
    print(list1)
    if 1234 in list1:
        list1.remove(1234)
    print(list1)
    del list1[0]
    print(list1)
    # 清空列表元素
    list1.clear()
    print(list1)

def qiepian( ):
    fruits = ['grape', 'apple', 'strawberry', 'waxberry']
    fruits += ['pitaya', 'pear', 'mango']
    print(fruits)
    # 循环遍历列表元素
    for fruit in fruits:
        print(fruit.title())
        print()
    # 列表切片
    fruits2 = fruits[1:4]
    print(fruits2)
    # fruit3 = fruits  # 没有复制列表只创建了新的引用
    # 可以通过完整切片操作来复制列表
    fruits3 = fruits[:]
    print(fruits3)
    fruits4 = fruits[-3:-1]
    print(fruits4)
    # 可以通过反向切片操作来获得倒转后的列表的拷贝
    fruits5 =fruits[::-1]
    print(fruits5)

def paixu( ):
    #实现对列表的排序操作
    list1 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry']
    print(list1)
    list2 = sorted(list1)
    print(list2)
    # sorted函数返回列表排序后的拷贝不会修改传入的列表
    # 函数的设计就应该像sorted函数一样尽可能不产生副作用
    list3 = sorted(list1, reverse=True) #降序
    print(list3)
    # 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序
    list4 = sorted(list1, key=len)
    print(list4)
    # 给列表对象发出排序消息直接在列表对象上进行排序
    list1.sort(reverse=True)
    print(list1)


import  sys

def shengchengqi( ):
    f = [x for x in range(1, 10)]
    print(f)

    f = [x+y for x in 'ABCDE' for y in '12345']
    print(f)

    # 用列表的生成表达式语法创建列表容器
     # 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间
    f = [x ** 2 for x in range(1, 100)]
    print(sys.getsizeof(f))  # 查看对象占用内存的字节数
    print(f)
    # 请注意下面的代码创建的不是一个列表而是一个生成器对象
    # 通过生成器可以获取到数据但它不占用额外的空间存储数据
    # 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)
    f = (x**2 for x in range(10))
    print("*******************************")
    print(sys.getsizeof(f))
    print(f)
    for val in f:
        print(val,end = " ")
#迭代器 (iterator)和生成器(generator)

def fib (n):
    a,b = 0,1
    for _ in range(n):
        a,b = b ,a + b
        yield  a
print(fib(10))

def rep( ):
    for val in fib(20):
        print(val)

if __name__ == '__main__':
    rep( )
